@using API.Models;
@using Microsoft.Data.SqlClient;
@using Web.Services;
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@page "/registerorg"
<PageTitle>RegisterOrg</PageTitle>

<style>
    #navbar{
        margin-bottom:3%;
    }
    #reglabel{
        font-size:35px;
    }
    #text{
        text-align: center;
    }

    hr {
        border: 1px solid #C6C6C6;
        margin-bottom: 25px;
        width: 100%;
    }

    .registerbtn {
        background-color: #78586F;
        color: white;
        padding: 16px 20px;
        margin: 10px 0;
        border: none;
        cursor: pointer;
        width: 100%;
        opacity: 0.9;
    }
    .link:hover {
        color: dodgerblue;
    }
    .registerbtn:hover {
        opacity: 1;
    }
    .signin {
        text-align: center;
    }

    .input{
        width: 100%;
        padding: 15px 0px;
        margin: 5px 0 22px 0px;
        display: inline-block;
        border: none;
        background: #C6C6C6;
    }

    .input:focus {
        background-color: #AFADAD;
        outline: none;
    }
    .container{
        margin: 0% 20% 20px 20%;
    }
    .errormsg{
        color:red;
        margin-top:-20px;
        margin-bottom: 25px;
    }
    .login{
        margin: 0 35% 0 35%;
    }
</style>

<body>
    <div id="navbar"> <NavBarNotLogged /></div>

    <div id="text"> <label id="reglabel">Registrar Empresa</label></div>

    <div class="container">
            <hr>
            <EditForm Model="@org" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />

                <label for="name">Nombre de la Organización</label>
                <InputText class="input" id="name" placeholder="  Nombre de la organización" @bind-Value="org.NombreOrg" />
                <ValidationMessage For="@(() => org.NombreOrg)" class="errormsg" />
           
                <label for="email">Email</label>
                <InputText class="input"  id="email" placeholder="  Email" @bind-Value="org.Email" />
                <ValidationMessage For="@(() => org.Email)" class="errormsg" />

                <label for="dir">Dirección</label>
                <InputText class="input" id="dir" placeholder="  Dirección" @bind-Value="org.Direccion"/>
                <ValidationMessage For="@(() => org.Direccion)" class="errormsg" />

                <label for="password">Contraseña</label>
                <InputText class="input" id="password" placeholder="  Contraseña" @bind-Value="org.Contraseña" />
                <ValidationMessage For="@(() => org.Contraseña)" class="errormsg" />
         

            <hr>
            <button class="registerbtn" type="submit">Registrarse</button>
            </EditForm>
    </div>
    <div class="login">
        <a class="link" href="login">Ya tienes una cuenta? Inicia Sesión.</a>
    </div>
   

</body>



@code {
    private OrganizacionCreateDTO org = new OrganizacionCreateDTO();
    string result;
    [Inject]
    public IOrganizacionServices OrganizacionServices { get; set; }

    private async Task HandleValidSubmit()
    {
        try
        {
            result = await OrganizacionServices.PostOrganizacion(org);
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
            return;
        }
        await JsRuntime.InvokeVoidAsync("alert", result);
        Navigation.NavigateTo("login");
    }
}
