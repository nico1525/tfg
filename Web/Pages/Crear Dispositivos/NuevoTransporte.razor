@inject NavigationManager Navigation
@page "/agregar/transporte"
@using API.Models;
@using Web.Services;
@layout AgregarDispositivo
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JsRuntime


<PageTitle>Agregar Transporte</PageTitle>

<style>
    #Agregar {
        margin-bottom: 2%;
        float: left;
    }

    #labelnew {
        font-size: 24px;
        margin-bottom: 3%;
    }

    .iniciarbtn {
        background-color: #ec8f2f;
        color: white;
        padding: 16px 20px;
        margin: 10px 0;
        border: none;
        cursor: pointer;
        width: 100%;
        opacity: 0.9;
    }

        .iniciarbtn:hover {
            opacity: 1;
        }

    .input {
        width: 100%;
        padding: 15px 0px;
        margin: 5px 0 22px 0px;
        border: none;
        background: #f1f1f1;
    }

        .input:focus {
            background-color: #ddd;
            outline: none;
        }

    .errormsg {
        color: red;
        margin-top: -20px;
        margin-bottom: 25px;
    }

    .login {
        margin: 0 35% 0 35%;
    }
</style>

<body>
    <div id="Agregar"></div>
    <div id="labelnew"><label><b>Nuevo Transporte:</b></label></div>
    <div id="container">
        <EditForm Model="@transporte" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <label for="edificio"><b>Edificio/Sede</b></label>
            <InputText class="input" id="edificio" placeholder="  Edificio/Sede" @bind-Value="transporte.Edificio" />
            <ValidationMessage For="@(() => transporte.Edificio)" class="errormsg" />

            <label for="categoria"><b>Tipo de Transporte</b></label>
            <InputSelect class="input" id="TipoTransporte" @bind-Value="transporte.TipoTransporte">
                <option value="ferrocarril">Ferrocarril</option>
                <option value="maritimo">Marítimo</option>
                <option value="aereo">Aéreo</option>
            </InputSelect>
            <ValidationMessage For="@(() => transporte.TipoTransporte)" class="errormsg" />

            <label for="categoria"><b>Combustible del Transporte</b></label>
            <InputSelect class="input" id="CombustibleTransporte" @bind-Value="transporte.CombustibleTransporte">
                <option value="gasoleo">Gasóleo</option>
                <option value="fueloleo">Fuelóleo</option>
                <option value="queroseno">Queroseno</option>
                <option value="gasolinaaviacion">Gasolina de Aviación</option>

            </InputSelect>
            <ValidationMessage For="@(() => transporte.CombustibleTransporte)" class="errormsg" />

            <button class="iniciarbtn" type="submit">Añadir Transporte</button>
        </EditForm>
    </div>
</body>

@code {
    private TransporteCreateDTO transporte = new TransporteCreateDTO() { CombustibleTransporte = "gasoleo", TipoTransporte="ferrocarril" };
    string result;
    [Inject]
    public ITransporteServices TransporteServices { get; set; }
    private async Task HandleValidSubmit()
    {
        try
        {
            result = await TransporteServices.PostTransporte(transporte);
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
            return;
        }
        await JsRuntime.InvokeVoidAsync("alert", result);
    }
}