@inject NavigationManager Navigation
@page "/modificar/instalacionfija/{id}"
@using API.Models;
@using Web.Helpers;
@using Web.Services;
@using Microsoft.AspNetCore.Components.Forms
@inject SweetAlertService Swal;
@layout Modificar
@inject HttpClient Http



<PageTitle>Modificar Instalación Fija</PageTitle>

<style>
    #Agregar {
        margin-bottom: 2%;
        float: left;
    }

    .iniciarbtn {
        background-color: #78586F;
        color: white;
        padding: 16px 20px;
        margin: 10px 0;
        border: none;
        cursor: pointer;
        width: 100%;
        opacity: 0.9;
    }

        .iniciarbtn:hover {
            opacity: 1;
        }

    .input {
        width: 100%;
        padding: 15px 0px;
        margin: 5px 0 22px 0px;
        border: none;
        background: #C6C6C6;
    }

        .input:focus {
            background-color: #AFADAD;
            outline: none;
        }

        .input:hover {
            background-color: #AFADAD;
        }

    .errormsg {
        color: red;
        margin-top: -20px;
        margin-bottom: 25px;
    }

    .login {
        margin: 0 35% 0 35%;
    }
</style>

<body>
    <div id="Agregar"></div>
    <div id="container">
        <EditForm autocomplete="off" Model="@instalacionfija" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <label>Id de la Instalación Fija</label>
            <InputText class="input" id="edificio" readonly="@true" @bind-Value="@id" />

            <label for="edificio">Edificio/Sede</label>
            <InputText class="input" id="edificio" placeholder="  Edificio/Sede" @bind-Value="instalacionfija.Edificio" />
            <ValidationMessage For="@(() => instalacionfija.Edificio)" class="errormsg" />

            <label for="matricula">Matricula</label>
            <InputText class="input" id="matricula" placeholder="  Nombre" @bind-Value="instalacionfija.Nombre" />
            <ValidationMessage For="@(() => instalacionfija.Nombre)" class="errormsg" />

            <button class="iniciarbtn" type="submit">Modificar InstalacionesFijas</button>
        </EditForm>
    </div>
</body>

@code {
    [Parameter]
    public string id { get; set; }

    private InstalacionesFijasModifyDTO instalacionfija = new InstalacionesFijasModifyDTO();
    private InstalacionesFijasDTO originalinstalacionfija = new InstalacionesFijasDTO();

    string result;
    [Inject]
    public IInstalacionesFijasServices InstalacionesFijasServices { get; set; }
    private async Task HandleValidSubmit()
    {
        try
        {
            int idint = int.Parse(id);
            result = await InstalacionesFijasServices.UpdateInstalacionesFijasPorId(idint, instalacionfija);
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Ha habido un problema", e.Message, "error");
            return;
        }
        await Swal.FireAsync(result, null, "success");
        Navigation.NavigateTo("/gestion/instalacionesfijas");
    }
    async void GetInstalacionesFijas()
    {
        int idint = int.Parse(id);
        originalinstalacionfija = await InstalacionesFijasServices.GetInstalacionesFijasById(idint);
        instalacionfija.Nombre = originalinstalacionfija.Nombre;
        instalacionfija.Edificio = originalinstalacionfija.Edificio;
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        if (Storage.token == null)
        {
            Navigation.NavigateTo("");
            return;
        }
        InstalacionesFijasServices = new InstalacionesFijasServices(Http);

        GetInstalacionesFijas();
    }
}