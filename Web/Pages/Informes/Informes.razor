@page "/informes"
@using API.Helpers;
@using API.Models;
@using API.Models.Query_Models;
@using Web.Helpers;
@using Web.Services;
@using Web.Services.InformesServices;
@using static API.Controllers.InformesControllers.InformesVehiculoController;
@layout NavBarLogged
@inject NavigationManager Navigation
@inject HttpClient Http
@using ChartJs.Blazor.PieChart
@inject SweetAlertService Swal;
@inherits LayoutComponentBase

<PageTitle>Informes</PageTitle>

<style>
    #glabel {
        font-size: 18px;
    }

    #inilabel {
        font-size: 36px;
    }
    #navbar {
        margin-bottom: 2%;
    }

    #text {
        text-align: center;
    }
    #label{
        font-size: 1px;
    }
    #filtro{
        
    }
</style>


<CascadingValue Value="@this" IsFixed="true">
<body>
    <div id="navbar">
    </div>
    <div id="text"> <label id="inilabel">Generación de Informes</label></div>
    <label id="glabel">Generar Informe de: </label>
            <select @bind="dispositivo" id="select">
                <option value="vehiculo">Vehiculo</option>
                <option value="transporte">Transporte</option>
                <option value="maquinaria">Maquinaria</option>
                <option value="emisionfugitiva">Emisiones Fugitivas</option>
                <option value="instalacionfija">Instalaciones Fijas</option>
                <option value="electricidad">Dispositivo eléctrico</option>
                <option value="otros">Consumos de otras fuentes</option>
                <option value="todos">Todos los Dispositivos</option>
            </select>
    @if (filtroid2.Equals("sinid"))
    {
        <label id="glabel">para todos los dispositivos </label>
    }
    else
    {
        <label id="glabel">Con id: </label>
        <InputText placeholder="Id del Dispositivo" @bind-Value="id" />
    }
    

   <label id="glabel"> entre las fechas</label>

    <InputDate  @bind-Value="fechaini" />
    
    <label id="glabel"> y</label>
    
    <InputDate  @bind-Value="fechafin" />
   
    <button class="alta" @onclick="generar">Generar Informe</button>
    
    <div id="filtro"> <label id="glabel"> Filtrar por :</label>
        <select @bind="filtromes" id="select">
            <option value="no">Consumo Total</option>
            <option value="meses">Consumo por Meses</option>
        </select>

    @if (filtromes2.Equals("no"))
    {
            <select @bind="filtroid" id="select">
                <option value="sinid">Todos los dispositivos</option>
                <option value="conid">Dispositivo por Id</option>
            </select>
    }
    </div>
    
    <div id="dispositivo">
        @Body
    </div>
</body>
</CascadingValue>

@code {
    public ConsumoCombustibleId consumo = new();
    public ConsumoElectricidadId consumoElectricidad = new();
    public ConsumoEmisionesFugitivasId ConsumoEmisionesFugitivas = new();
    public ConsumoOtrosConsumosId ConsumoOtrosConsumos = new();

    public List<ConsumoMes> consumoMes = new();
    public List<ConsumoMesEmisionesFugitivas> ConsumoMesEmisionesFugitivas = new();
    public List<ConsumoMesElectricidad> ConsumoMesElectricidad = new();
    public List<ConsumoMesOtrosConsumos> ConsumoMesOtrosConsumos = new();

    private string dispositivo = "vehiculo";
    private string id = "0";

    private DateTime fechaini = DateTime.Now.AddMonths(-2);
    private DateTime fechafin = DateTime.Now.AddMonths(2);

    [Inject]
    public IInformeVehiculoService informeServices { get; set; }
    [Inject]
    public IInformeTransporteService informeTransporteServices { get; set; }
    [Inject]
    public IInformeMaquinariaService informemaquinariaServices { get; set; }
    [Inject]
    public IInformeInstalacionesFijasService informeInstalacionesFijasServices { get; set; }
    [Inject]
    public IInformeEmisionesFugitivasService informeEmisionesFugitivasServices { get; set; }
    [Inject]
    public IInformeElectricidadService informeElectricidadServices { get; set; }
    [Inject]
    public IInformeOtrosConsumosService informeOtrosConsumosServices { get; set; }

    private string? filtroid2 = "sinid";
    private string? filtroid { get { return filtroid2; } set { filtroid2 = value; VerId(); } }

    private string? filtromes2 = "no";
    private string? filtromes { get { return filtromes2; } set { filtromes2 = value; VerMes(); } }
    public void VerMes()
    {
        filtroid2 = "conid";
        StateHasChanged();
    }
    public void VerId()
    {
        if (filtroid2.Equals("sinid")) { id = "0"; }
        else { id = ""; }
        StateHasChanged();
    }
    public async void generar()
    {
        try
        {
            if (filtromes.Equals("no"))
            {
                switch (dispositivo, filtroid2)
                {
                    case ("vehiculo", "sinid"):
                        consumo = await informeServices.AllVehiculoFechas(fechaini, fechafin);
                        Storage.consumoVehiculoId = consumo;
                        Navigation.NavigateTo("informes/vehiculo/0/0");
                        break;
                    case ("vehiculo", "conid"):
                        consumo = await informeServices.VehiculosFechaByID(fechaini, fechafin, int.Parse(id));
                        Storage.consumoVehiculoId = consumo;
                        Navigation.NavigateTo($"informes/vehiculo/1/{id}");
                        break;
                    case ("transporte", "sinid"):
                        consumo = await informeTransporteServices.AllTransporteFechas(fechaini, fechafin);
                        Storage.consumoVehiculoId = consumo;
                        Navigation.NavigateTo("informes/transporte/0");
                        break;
                    case ("transporte", "conid"):
                        consumo = await informeTransporteServices.TransportesFechaByID(fechaini, fechafin, int.Parse(id));
                        Storage.consumoVehiculoId = consumo;
                        Navigation.NavigateTo("informes/transporte/1");
                        break;
                    case ("maquinaria", "sinid"):
                        consumo = await informemaquinariaServices.AllMaquinariaFechas(fechaini, fechafin);
                        Storage.consumoVehiculoId = consumo;
                        Navigation.NavigateTo("informes/maquinaria/0");
                        break;
                    case ("maquinaria", "conid"):
                        consumo = await informemaquinariaServices.MaquinariasFechaByID(fechaini, fechafin, int.Parse(id));
                        Storage.consumoVehiculoId = consumo;
                        Navigation.NavigateTo("informes/maquinaria/1");
                        break;
                    case ("emisionfugitiva", "sinid"):
                        ConsumoEmisionesFugitivas = await informeEmisionesFugitivasServices.AllEmisionesFugitivasFechas(fechaini, fechafin);
                        Storage.ConsumoEmisionesFugitivas = ConsumoEmisionesFugitivas;
                        Navigation.NavigateTo("informes/emisionfugitiva/0");
                        break;
                    case ("emisionfugitiva", "conid"):
                        ConsumoEmisionesFugitivas = await informeEmisionesFugitivasServices.EmisionesFugitivasFechaByID(fechaini, fechafin, int.Parse(id));
                        Storage.ConsumoEmisionesFugitivas = ConsumoEmisionesFugitivas;
                        Navigation.NavigateTo("informes/emisionfugitiva/1");
                        break;
                    case ("instalacionfija", "sinid"):
                        consumo = await informeInstalacionesFijasServices.AllInstalacionesFijasFechas(fechaini, fechafin);
                        Storage.consumoVehiculoId = consumo;
                        Navigation.NavigateTo("informes/instalacionfija/0");
                        break;
                    case ("instalacionfija", "conid"):
                        consumo = await informeInstalacionesFijasServices.InstalacionesFijasFechaByID(fechaini, fechafin, int.Parse(id));
                        Storage.consumoVehiculoId = consumo;
                        Navigation.NavigateTo("informes/instalacionfija/1");
                        break;
                    case ("electricidad", "sinid"):
                        consumoElectricidad = await informeElectricidadServices.AllElecricidadFechas(fechaini, fechafin);
                        Storage.ConsumoElectricidad = consumoElectricidad;
                        Navigation.NavigateTo("informes/electricidad/0");
                        break;
                    case ("electricidad", "conid"):
                        consumoElectricidad = await informeElectricidadServices.ElecricidadFechaByID(fechaini, fechafin, int.Parse(id));
                        Storage.ConsumoElectricidad = consumoElectricidad;
                        Navigation.NavigateTo("informes/electricidad/1");
                        break;
                    case ("otros", "sinid"):
                        ConsumoOtrosConsumos = await informeOtrosConsumosServices.AllOtrosConsumosFechas(fechaini, fechafin);
                        Storage.ConsumoOtrosConsumos = ConsumoOtrosConsumos;
                        Navigation.NavigateTo("informes/otros/0");
                        break;
                    case ("otros", "conid"):
                        ConsumoOtrosConsumos = await informeOtrosConsumosServices.OtrosConsumosFechaByID(fechaini, fechafin, int.Parse(id));
                        Storage.ConsumoOtrosConsumos = ConsumoOtrosConsumos;
                        Navigation.NavigateTo("informes/otros/1");
                        break;
                }
            }
            else
            {
                switch ((dispositivo))
                {
                    case ("vehiculo"):
                        consumoMes = await informeServices.VehiculosFechaByIDporMes(fechaini, fechafin, int.Parse(id));
                        Storage.consumoMes = consumoMes;
                        Navigation.NavigateTo($"informes/vehiculo/2/{id}");
                        break;
                    case ("transporte"):
                        consumoMes = await informeTransporteServices.TransportesFechaByIDporMes(fechaini, fechafin, int.Parse(id));
                        Storage.consumoMes = consumoMes;
                        Navigation.NavigateTo("informes/transporte/2");
                        break;
                    case ("maquinaria"):
                        consumoMes = await informemaquinariaServices.MaquinariasFechaByIDporMes(fechaini, fechafin, int.Parse(id));
                        Storage.consumoMes = consumoMes;
                        Navigation.NavigateTo("informes/maquinaria/2");
                        break;
                    case ("emisionfugitiva"):
                        ConsumoMesEmisionesFugitivas = await informeEmisionesFugitivasServices.EmisionesFugitivasFechaByIDporMes(fechaini, fechafin, int.Parse(id));
                        Storage.ConsumoMesEmisionesFugitivas = ConsumoMesEmisionesFugitivas;
                        Navigation.NavigateTo("informes/emisionfugitiva/2");
                        break;
                    case ("instalacionfija"):
                        consumoMes = await informeInstalacionesFijasServices.InstalacionesFijasFechaByIDporMes(fechaini, fechafin, int.Parse(id));
                        Storage.consumoMes = consumoMes;
                        Navigation.NavigateTo("informes/instalacionfija/2");
                        break;
                    case ("electricidad"):
                        ConsumoMesElectricidad = await informeElectricidadServices.ElecricidadFechaByIDporMes(fechaini, fechafin, int.Parse(id));
                        Storage.ConsumoMesElectricidad = ConsumoMesElectricidad;
                        Navigation.NavigateTo("informes/electricidad/2");
                        break;
                    case ("otros"):
                        ConsumoMesOtrosConsumos = await informeOtrosConsumosServices.OtrosConsumosFechaByIDporMes(fechaini, fechafin, int.Parse(id));
                        Storage.ConsumoMesOtrosConsumos = ConsumoMesOtrosConsumos;
                        Navigation.NavigateTo("informes/otros/2");
                        break;
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Ha habido un problema", e.Message, "error");

        }
    }

    protected override void OnInitialized()
    {
        if (Storage.token == null)
        {
            Navigation.NavigateTo("");
            return;
        }
        informeServices = new InformeVehiculoService(Http);
    }
}