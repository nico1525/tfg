@page "/informes/vehiculo/{id:int}/{vehiculo:int}"
@using API.Helpers;
@using API.Models;
@using API.Models.Query_Models;
@using Web.Helpers;
@using Web.Services;
@using Web.Services.InformesServices;
@layout Informes
@inject NavigationManager Navigation
@inject HttpClient Http


<style>
    #container{
        margin: 3% 27% 0 27%;
    }

    #container2{
        width: 46%;
        display: inline-block;
        float: left;
        margin:0 5% 0 2%;
    }

    #container3 {
        width: 45%;
        display: inline-block;
    }
    #title{
        text-align: center;
        margin-bottom: 3%;
        font-size: 36px;
    }

    #titlediv {
        margin-bottom: 3%;
        margin-top:2%;
        text-align:center;
    }
    .data{
        float:right;
        font-size: 22px;
    }
    .texto{
        font-size: 22px;
    }
    #cantidad{
        margin-top:1%;
    }
</style>

<body>
    @if (id == 0)
    {
        <div id="titlediv">
            <label id="title">Consumo de todos los Vehículos entre las dos fechas seleccionadas</label>
        </div>
        <div id="container">
            <div>
                <label class="texto">Consumo Total (en kg CO2e): </label> <label class="data">@consumoTotal</label>
            </div>
            <div id="cantidad">
                <label class="texto">Combustible Total consumido (en Litros): </label> <label  class="data">@combustibleTotal</label>
            </div>
        </div>
    }
    @if (id == 1)
    {
        <div id="titlediv">
            <label id="title">Consumo de el Vehículo con id: @vehiculo entre las dos fechas seleccionadas</label>
        </div>
        <div id="container">
            <div>
                <label class="texto">Consumo Total (en kg CO2e): </label> <label class="data">@consumoTotal</label>
            </div>
            <div id="cantidad">
                <label class="texto">Combustible Total consumido (en Litros): </label> <label class="data">@combustibleTotal</label>
            </div>
        </div>
    }
    @if (id == 2)
    {
        <div id="titlediv">
            <label id="title">Consumo de el Vehículo con id: @vehiculo entre las dos fechas seleccionadas agrupado por Meses</label>
        </div>
        <div id="container2">
            <Chart @ref="barChart" Type="ChartType.Bar" TItem="float"/>
        </div>
        <div id="container3">
            <Chart @ref="barChart2" Type="ChartType.Bar" TItem="float" />
        </div>
    }
</body>

@code {
    Chart<float> barChart;
    Chart<float> barChart2;

    [Parameter]
    public int id { get; set; }

    [Parameter]
    public int vehiculo { get; set; }

    ConsumoCombustibleId consumo;
    List<ConsumoMes> consumoMes;
    float combustibleTotal = 0;
    float consumoTotal = 0;

    public void Consumo()
    {
        combustibleTotal = consumo.Total_combustible;
        consumoTotal = consumo.Total_consumido;
        StateHasChanged();
    }
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(209, 102, 247, 0.4f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(209, 102, 247, 1f) };
   
    List<string> backgroundColors2 = new List<string> { ChartColor.FromRgba(246, 44, 37, 0.4f) };
    List<string> borderColors2 = new List<string> { ChartColor.FromRgba(246, 44, 37, 1f) };

    public List<string> ListaMeses()
    {
        List<string> nombremes = new();
        foreach(var mes in consumoMes)
        {
            nombremes.Add(mes.Meses);
        }
        return nombremes;
    }

    public List<float> GetDataConsumo()
    {
        List<float> nombremes = new();
        foreach (var mes in consumoMes)
        {
            nombremes.Add(mes.Consumo_mes);
        }
        return nombremes;
    }
    private BarChartDataset<float> GetBarChartDataset()
    {
        return new()
            {
                Label = "Consumo del Vehículo (en kg CO2e)",
                Data = GetDataConsumo(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                BorderWidth = 1,
                
            };
    }
    private BarChartDataset<float> GetBarChartDataset2()
    {
        return new()
            {
                Label = "Combustible por Meses (en Litros)",
                Data = GetDataCombustible(),
                BackgroundColor = backgroundColors2,
                BorderColor = borderColors2,
                BorderWidth = 1
            };
    }
    public List<float> GetDataCombustible()
    {
        List<float> nombremes = new();
        foreach (var mes in consumoMes)
        {
            nombremes.Add(mes.Combustible_mes);
        }
        return nombremes;
    }
    protected override async Task OnAfterRenderAsync(bool first)
    {
        switch (id)
        {
            case 0: 
            case 1: consumo = Storage.consumoVehiculoId; Consumo(); break;

            case 2: consumoMes = Storage.consumoMes; 
                await barChart.Clear();
                await barChart2.Clear();
                await barChart.AddLabelsDatasetsAndUpdate(ListaMeses(), GetBarChartDataset());
                await barChart2.AddLabelsDatasetsAndUpdate(ListaMeses(), GetBarChartDataset2()); break;
        }
    }
}
