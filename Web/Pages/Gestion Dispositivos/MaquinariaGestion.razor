@inject NavigationManager Navigation
@page "/gestion/maquinaria"
@using API.Models;
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using Web.Helpers;
@using Web.Services;
@layout GestionDispositivos
@inject IJSRuntime JsRuntime
@inject HttpClient Http


<PageTitle>Gestion Maquinaria</PageTitle>

<style>
    h1 {
        font-size: 30px;
        color: #000;
        text-transform: uppercase;
        font-weight: 300;
        text-align: center;
        margin-bottom: 15px;
    }

    table {
        width: 100%;
        table-layout: fixed;
    }

    thead {
    }

    .tbl-content thead th {
        position: sticky;
        background-color: #A37897;
        top: 0px;
        border-bottom: solid 1px black;
    }

    .tbl-content {
        height: 600px;
        overflow-x: auto;
        margin-top: 0px;
        border-collapse: collapse;
    }

    th {
        padding: 20px 10px;
        text-align: left;
        font-weight: 500;
        font-size: 12px;
        color: #000;
        text-transform: uppercase;
        border-top: solid 2px black;
        border-right: solid 1px black;
    }

    td {
        padding: 15px;
        text-align: left;
        vertical-align: middle;
        font-weight: 300;
        font-size: 15px;
        color: #000;
        border-right: solid 1px black;
        text-align: center;
        background-color: #DDC8E2;
    }

    #filtro {
        width: 100%;
        padding: 10px 0px;
        background-color: #A37897;
        border-radius: 10px 10px 0 0;
    }

    #input {
        padding: 2.5px 20px
    }

    .botones {
        padding: 15% 20%;
    }

    .headerbuttons {
        padding: 20px 0px;
        width: 7%;
        text-align: center;
    }
</style>

<body>
    <h1>Lista de Maquinarias</h1>

    <div id="filtro">
        <label id="tipolabel">Filtrar:</label>

        <select @bind="tipofiltro" id="select">
            <option value="id">ID</option>
            <option value="nombre">Nombre</option>
            <option value="tipo">Tipo de Maquinaria</option>
            <option value="edificio">Edificio / Sede</option>

        </select>
        <input id="input" placeholder="Buscar" @bind="filtrocat" />
        <button id="button" @onclick="Filtrar">Filtrar</button>

    </div>


    <div class="tbl-content">
        <table cellpadding="0" cellspacing="0" border="0">

            <thead>
                <tr>
                    <th>Id Maquinaria</th>
                    <th>Nombre</th>
                    <th>Tipo de Maquinaria</th>
                    <th>Edificio</th>
                    @if (Storage.role == API.Helpers.Role.OrgAdmin)
                    {
                        <th class="headerbuttons">Modificar</th>
                        <th class="headerbuttons">Eliminar</th>
                    }
                    <th class="headerbuttons">Ver Consumos</th>


                </tr>
            </thead>
            <Virtualize Items="@listashow" Context="maquinaria">
                <tbody>
                    <tr>
                        <td>@maquinaria.Id</td>
                        <td>@maquinaria.Nombre</td>
                        <td>@maquinaria.TipoMaquinaria</td>
                        <td>@maquinaria.Edificio</td>
                        @if (Storage.role == API.Helpers.Role.OrgAdmin)
                        {
                            <td><button class="botones" @onclick="(() => Modificar(maquinaria.Id))">M</button></td>
                            <td><button class="botones" @onclick="(() => Eliminar(maquinaria.Id, maquinaria))">X</button></td>
                        }
                        <td><button class="botones" @onclick="(() => VerConsumos(maquinaria.Id))">C</button></td>
                    </tr>

                </tbody>
            </Virtualize>
        </table>
    </div>

</body>

@code {
    List<MaquinariaDTO> lista = new List<MaquinariaDTO>();
    List<MaquinariaDTO> listashow = new List<MaquinariaDTO>();
    string tipofiltro = "id";
    string filtrocat = "";

    [Inject]
    public IMaquinariaServices maquinariaServices { get; set; }

    public void Modificar(int id)
    {
        Navigation.NavigateTo("/modificar/maquinaria/" + id);
    }

    public async void Eliminar(int id, MaquinariaDTO maquinaria)
    {
        try
        {
            await maquinariaServices.DeleteMaquinaria(id);
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
            return;
        }
        await JsRuntime.InvokeVoidAsync("alert", $"Maquinaria con id {id} eliminado correctamente");
        listashow.Remove(maquinaria);
        lista.Remove(maquinaria);
        StateHasChanged();
    }

    public void VerConsumos(int id)
    {
        Navigation.NavigateTo("/consumo/maquinaria/" + id);
    }

    public void Filtrar()
    {
        listashow.Clear();
        if (filtrocat.Equals(""))
        {
            listashow.AddRange(lista);
            return;
        }
        foreach (var maquinaria in lista)
        {
            switch (tipofiltro)
            {
                case "id":
                    if (maquinaria.Id.ToString().Contains(filtrocat))
                    {
                        listashow.Add(maquinaria);
                    }
                    break;
                case "tipo":
                    if (maquinaria.TipoMaquinaria is not null && maquinaria.TipoMaquinaria.Contains(filtrocat))
                    {
                        listashow.Add(maquinaria);
                    }
                    break;
                case "nombre":
                    if (maquinaria.Nombre is not null && maquinaria.Nombre.Contains(filtrocat))
                    {
                        listashow.Add(maquinaria);
                    }
                    break;
                case "edificio":
                    if (maquinaria.Edificio is not null && maquinaria.Edificio.Contains(filtrocat))
                    {
                        listashow.Add(maquinaria);
                    }
                    break;
            }

        }
        StateHasChanged();
    }

    async void GetMaquinariaList()
    {
        lista = await maquinariaServices.GetMaquinaria();

        listashow.AddRange(lista);
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        if (Storage.token == null)
        {
            Navigation.NavigateTo("");
            return;
        }
        maquinariaServices = new MaquinariaServices(Http);
        GetMaquinariaList();
    }
}
