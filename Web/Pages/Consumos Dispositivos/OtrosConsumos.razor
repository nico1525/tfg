@inject NavigationManager Navigation
@page "/consumo/otrosconsumos"
@using API.Models;
@using API.Models.Consumos;
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using Web.Helpers;
@using Web.Services;
@using Web.Services.ConsumoServices;
@layout Consumos
@inject IJSRuntime JsRuntime
@inject HttpClient Http


<PageTitle>Consumo OtrosConsumos</PageTitle>

<style>
    h1 {
        font-size: 30px;
        color: #000;
        text-transform: uppercase;
        font-weight: 300;
        text-align: center;
        margin-bottom: 15px;
    }

    table {
        width: 100%;
        table-layout: fixed;
    }

    thead {
    }

    .tbl-content thead th {
        position: sticky;
        background-color: aqua;
        top: 0px;
        border-bottom: solid 1px black;
    }

    .tbl-content {
        height: 600px;
        overflow-x: auto;
        margin-top: 0px;
        border-collapse: collapse;
    }

    th {
        padding: 20px 10px;
        text-align: left;
        font-weight: 500;
        font-size: 12px;
        color: #000;
        text-transform: uppercase;
        border-top: solid 2px black;
        border-right: solid 1px black;
    }

    td {
        padding: 15px;
        text-align: left;
        vertical-align: middle;
        font-weight: 300;
        font-size: 15px;
        color: #000;
        border-right: solid 1px black;
        text-align: center;
        background-color: aquamarine;
    }

    #filtro {
        width: 100%;
        padding: 10px 0px;
        background-color: aqua;
    }

    #input {
        padding: 2.5px 20px
    }

    .botones {
        padding: 15% 20%;
    }

    .headerbuttons {
        padding: 20px 0px;
        width: 7%;
        text-align: center;
    }
</style>

<body>
    <h1><b>Lista de Consumo de OtrosConsumoss</b></h1>

    <div id="filtro">
        <label id="tipolabel"><b>Filtrar:</b></label>

        <select @bind="tipofiltro" id="select">
            <option value="id">ID</option>
            <option value="consumo">Consumo</option>
            <option value="cantidad">Cantidad de Consumo</option>
            <option value="edificio">Edificio / Sede</option>
            <option value="nombre">Nombre</option>
            <option value="categoria">Categoría de la Actividad</option>
            <option value="idorg">ID de Organización</option>

        </select>
        <input id="input" placeholder="Buscar" @bind="filtrocat" />
        <button id="button" @onclick="Filtrar">Filtrar</button>

    </div>


    <div class="tbl-content">
        <table cellpadding="0" cellspacing="0" border="0">

            <thead>
                <tr>
                    <th>Id Consumo</th>
                    <th>Consumo</th>
                    <th>Factor Emisión</th>
                    <th>Fecha de Inicio</th>
                    <th>Fecha Fin</th>
                    <th>Cantidad de Consumo</th>
                    <th>Edificio/Sede</th>
                    <th>Nombre</th>
                    <th>Categoría de la actividad</th>
                    <th>Id Organización</th>
                    <th class="headerbuttons">Modificar</th>
                    <th class="headerbuttons">Eliminar</th>


                </tr>
            </thead>
            <Virtualize Items="@listashow" Context="consumo">
                <tbody>
                    <tr>
                        <td>@consumo.Id</td>
                        <td>@consumo.Consumo</td>
                        <td>@consumo.FactorEmision</td>
                        <td>@consumo.FechaInicio</td>
                        <td>@consumo.FechaFin</td>
                        <td>@consumo.CantidadConsumo</td>
                        <td>@consumo.Edificio</td>
                        <td>@consumo.Nombre</td>
                        <td>@consumo.CategoriaActividad</td>
                        <td>@consumo.OrganizacionId</td>
                        <td><button class="botones" @onclick="(() => Modificar(consumo.Id))">M</button></td>
                        <td><button class="botones" @onclick="(() => Eliminar(consumo.Id, consumo))">X</button></td>
                    </tr>

                </tbody>
            </Virtualize>
        </table>
    </div>

</body>

@code {
    List<OtrosConsumosDTO> lista = new List<OtrosConsumosDTO>();
    List<OtrosConsumosDTO> listashow = new List<OtrosConsumosDTO>();
    string tipofiltro = "id";
    string filtrocat = "";

    [Inject]
    public IOtrosConsumosServices otrosConsumosconsumoServices { get; set; }

    public void Modificar(int id)
    {
        Navigation.NavigateTo("/modificar/otrosconsumos/" + id);
    }

    public async void Eliminar(int id, OtrosConsumosDTO consumo)
    {
        try
        {
            await otrosConsumosconsumoServices.DeleteOtrosConsumos(id);
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
            return;
        }
        await JsRuntime.InvokeVoidAsync("alert", $"Consumo con id {id} eliminado correctamente");
        listashow.Remove(consumo);
        lista.Remove(consumo);
        StateHasChanged();
    }

    public void Filtrar()
    {
        listashow.Clear();
        if (filtrocat.Equals(""))
        {
            listashow.AddRange(lista);
            return;
        }
        foreach (var consumo in lista)
        {
            switch (tipofiltro)
            {
                case "id":
                    if (consumo.Id.ToString().Contains(filtrocat))
                    {
                        listashow.Add(consumo);
                    }
                    break;
                case "consumo":
                    if (consumo.Consumo.ToString().Contains(filtrocat))
                    {
                        listashow.Add(consumo);
                    }
                    break;
                case "idorg":
                    if (consumo.OrganizacionId.ToString().Contains(filtrocat))
                    {
                        listashow.Add(consumo);
                    }
                    break;
                case "edificio":
                    if (consumo.Edificio is not null && consumo.Edificio.Contains(filtrocat))
                    {
                        listashow.Add(consumo);
                    }
                    break;
                case "nombre":
                    if (consumo.Nombre is not null && consumo.Nombre.Contains(filtrocat))
                    {
                        listashow.Add(consumo);
                    }
                    break;
                case "categoria":
                    if (consumo.CategoriaActividad is not null && consumo.CategoriaActividad.Contains(filtrocat))
                    {
                        listashow.Add(consumo);
                    }
                    break;
            }

        }
        StateHasChanged();
    }

    async void GetConsumoList()
    {

        lista = await otrosConsumosconsumoServices.GetOtrosConsumos();
        
        listashow.AddRange(lista);
       
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        if (Storage.token == null)
        {
            Navigation.NavigateTo("");
            return;
        }
        otrosConsumosconsumoServices = new OtrosConsumosServices(Http);
        GetConsumoList();
    }
}
